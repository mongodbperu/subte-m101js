1
00:00:00,000 --> 00:00:00,140

2
00:00:00,140 --> 00:00:00,530
All right.

3
00:00:00,530 --> 00:00:03,630
So now let's talk about replica
set failover in the

4
00:00:03,630 --> 00:00:05,260
node.js driver.

5
00:00:05,260 --> 00:00:08,900
So just to recap, when you're
sending writes or operations

6
00:00:08,900 --> 00:00:12,050
from the driver, writes will
go to the primary.

7
00:00:12,050 --> 00:00:16,120
So all writes will go to the
primary node in a replica set.

8
00:00:16,120 --> 00:00:19,100
The reads, by default, will
go to the primary.

9
00:00:19,100 --> 00:00:21,350
Although, you can configure them
to go elsewhere, which

10
00:00:21,350 --> 00:00:23,830
we'll actually cover
in later sections.

11
00:00:23,830 --> 00:00:26,700
So the question now is, what
happens when a node in the

12
00:00:26,700 --> 00:00:28,030
replica set goes down?

13
00:00:28,030 --> 00:00:30,060
Because that's actually
the whole purpose

14
00:00:30,060 --> 00:00:30,950
of the replica set.

15
00:00:30,950 --> 00:00:33,800
You have copies of your data,
because you want high

16
00:00:33,800 --> 00:00:38,240
availability and sort
of more durability.

17
00:00:38,240 --> 00:00:41,330
So the question we have now is,
what actually happens in

18
00:00:41,330 --> 00:00:45,210
that situation where this node
just gets blasted off the face

19
00:00:45,210 --> 00:00:45,840
of the earth?

20
00:00:45,840 --> 00:00:46,940
How do we need to respond?

21
00:00:46,940 --> 00:00:48,910
And how does the
driver respond?

22
00:00:48,910 --> 00:00:51,770
So it turns out, in the node.js
driver, what actually

23
00:00:51,770 --> 00:00:54,490
happens is that the writes
that come in from our

24
00:00:54,490 --> 00:00:58,600
application and the reads that
can't yet be sent to a primary

25
00:00:58,600 --> 00:01:00,800
but that need to be sent
to a primary are

26
00:01:00,800 --> 00:01:02,060
buffered in the driver.

27
00:01:02,060 --> 00:01:05,140
So from the application
perspective, you see that

28
00:01:05,140 --> 00:01:07,340
you're dispatching all these
reads and writes, you just

29
00:01:07,340 --> 00:01:09,280
don't see them complete yet.

30
00:01:09,280 --> 00:01:12,060
So the driver will actually
buffer these until the

31
00:01:12,060 --> 00:01:15,160
failover completes and you
have a new primary.

32
00:01:15,160 --> 00:01:16,740
Then it will send all
the operations.

33
00:01:16,740 --> 00:01:19,980
Then the client application will
get all the responses,

34
00:01:19,980 --> 00:01:22,540
and you'll see all the writes
and reads complete as they

35
00:01:22,540 --> 00:01:23,570
normally would.

36
00:01:23,570 --> 00:01:25,780
So let's look at an example
of how this looks

37
00:01:25,780 --> 00:01:27,990
in application code.

38
00:01:27,990 --> 00:01:30,380
So this is the example we're
going to be using to

39
00:01:30,380 --> 00:01:33,630
demonstrate this failover
behavior that I was just

40
00:01:33,630 --> 00:01:34,460
talking about.

41
00:01:34,460 --> 00:01:36,840
And you'll notice that most
of this is the same.

42
00:01:36,840 --> 00:01:39,230
We still are doing normal
Insert call.

43
00:01:39,230 --> 00:01:41,640
We still have this connection
string here.

44
00:01:41,640 --> 00:01:44,760
What we're doing a little bit
differently is using this

45
00:01:44,760 --> 00:01:46,580
setTimeout function.

46
00:01:46,580 --> 00:01:50,330
So what the setTimeout function
does is it actually

47
00:01:50,330 --> 00:01:53,570
registers the callback you give
it and calls it after

48
00:01:53,570 --> 00:01:55,110
this timeout expires.

49
00:01:55,110 --> 00:01:58,800
So this is saying, call the
function, insertDocument,

50
00:01:58,800 --> 00:02:02,340
which is the function we're
already in, after 1 second or

51
00:02:02,340 --> 00:02:04,040
1,000 milliseconds.

52
00:02:04,040 --> 00:02:06,340
So what this code will
actually do is

53
00:02:06,340 --> 00:02:07,810
it'll come down here--

54
00:02:07,810 --> 00:02:11,620
this is just a declaration, so
nothing's being executed yet.

55
00:02:11,620 --> 00:02:14,930
But then we get down here and we
call insertDocument, which

56
00:02:14,930 --> 00:02:19,090
calls this function, which will
dispatch an Insert and

57
00:02:19,090 --> 00:02:22,110
just continue on down here,
because we're actually doing

58
00:02:22,110 --> 00:02:23,280
this asynchronously.

59
00:02:23,280 --> 00:02:25,950
We don't have to wait until
we get a response.

60
00:02:25,950 --> 00:02:28,070
So we immediately come down
here and say, Dispatched

61
00:02:28,070 --> 00:02:32,140
insert, and then register this
function to be called again in

62
00:02:32,140 --> 00:02:33,740
1,000 milliseconds.

63
00:02:33,740 --> 00:02:37,280
So the result will be one Insert
every second, because

64
00:02:37,280 --> 00:02:40,030
this function will get called
once, register itself to be

65
00:02:40,030 --> 00:02:41,190
called again in one second.

66
00:02:41,190 --> 00:02:43,810
It will get called again,
register itself to get called

67
00:02:43,810 --> 00:02:45,580
again in one second, get
called again, and

68
00:02:45,580 --> 00:02:47,230
so on and so on.

69
00:02:47,230 --> 00:02:50,850
So this is effectively like a
For loop with a sleep of one

70
00:02:50,850 --> 00:02:53,470
second where we're just calling
Insert repeatedly.

71
00:02:53,470 --> 00:02:56,160
One difference is that we
don't have to wait for a

72
00:02:56,160 --> 00:02:58,370
response from Insert
before we sleep.

73
00:02:58,370 --> 00:03:01,180
So we don't have to do any
complicated logic like, say,

74
00:03:01,180 --> 00:03:02,880
how long do we need to sleep?

75
00:03:02,880 --> 00:03:05,780
Because we actually took half a
second to do the Insert and

76
00:03:05,780 --> 00:03:09,960
get the response, let's sleep
only for half a second.

77
00:03:09,960 --> 00:03:13,065
This one's a little simpler in
that respect, because we could

78
00:03:13,065 --> 00:03:14,100
just sleep for a second.

79
00:03:14,100 --> 00:03:17,040
And because we're not waiting
for a response, there aren't

80
00:03:17,040 --> 00:03:19,440
as many variables that we have
to think about, because we

81
00:03:19,440 --> 00:03:22,600
don't have to factor in the time
it took to get a response

82
00:03:22,600 --> 00:03:23,780
from this Insert.

83
00:03:23,780 --> 00:03:26,840
We could just sleep for a second
and get pretty close to

84
00:03:26,840 --> 00:03:28,720
one Insert per second.

85
00:03:28,720 --> 00:03:32,190
So that's one difference is this
asynchronous call here.

86
00:03:32,190 --> 00:03:35,630
The other difference is this
is not actually the same

87
00:03:35,630 --> 00:03:36,700
execution context.

88
00:03:36,700 --> 00:03:38,800
This is actually just
registering a callback.

89
00:03:38,800 --> 00:03:41,030
It's not like we have a single
thread going to sleep.

90
00:03:41,030 --> 00:03:44,680
So one side effect is that if we
call insertDocument, we can

91
00:03:44,680 --> 00:03:46,900
actually call it twice.

92
00:03:46,900 --> 00:03:50,350
What that'll do is call this
function twice, it'll register

93
00:03:50,350 --> 00:03:51,980
itself again twice.

94
00:03:51,980 --> 00:03:54,340
So in the next second, it'll
get called twice again and

95
00:03:54,340 --> 00:03:57,720
called twice again and called
twice again and so on.

96
00:03:57,720 --> 00:04:00,430
Another thing you can do that's
even crazier is you

97
00:04:00,430 --> 00:04:04,000
could put setTimeout, this
line here, twice.

98
00:04:04,000 --> 00:04:06,730
Now, what that'll do is just
exponentially increase the

99
00:04:06,730 --> 00:04:08,560
number of times this
function is called.

100
00:04:08,560 --> 00:04:11,520
So it'll get called the first
time, it'll register itself

101
00:04:11,520 --> 00:04:15,060
twice, then it'll get called
twice, and register itself

102
00:04:15,060 --> 00:04:16,570
twice per call.

103
00:04:16,570 --> 00:04:20,010
So it'll register itself four
times in the next second, then

104
00:04:20,010 --> 00:04:23,450
eight times in the next second,
then 16 times, then 32

105
00:04:23,450 --> 00:04:26,230
times, and rapidly grow in
powers of two until you're

106
00:04:26,230 --> 00:04:27,660
inserting hundreds of thousands

107
00:04:27,660 --> 00:04:29,410
of documents a second.

108
00:04:29,410 --> 00:04:31,080
So that's kind of
an interesting

109
00:04:31,080 --> 00:04:31,970
side effect of this.

110
00:04:31,970 --> 00:04:35,850
I'd recommend taking some time
to play with this function,

111
00:04:35,850 --> 00:04:39,070
copy this line or this line over
a few times, and just see

112
00:04:39,070 --> 00:04:39,590
what happens.

113
00:04:39,590 --> 00:04:41,680
It's an interesting result.

114
00:04:41,680 --> 00:04:44,680
So this is basically the example
we're going to use to

115
00:04:44,680 --> 00:04:45,960
demonstrate failover.

116
00:04:45,960 --> 00:04:49,250
All you really need to know is
that it's basically a For loop

117
00:04:49,250 --> 00:04:51,870
that's dispatching Insert
operations.

118
00:04:51,870 --> 00:04:54,940
And we should see the responses
as they come in,

119
00:04:54,940 --> 00:04:58,070
because this is an asynchronous
program and we're

120
00:04:58,070 --> 00:05:01,920
inserting documents that have
increasing document numbers.

121
00:05:01,920 --> 00:05:04,970
So let's run this application
and see what happens.

122
00:05:04,970 --> 00:05:05,350
All right.

123
00:05:05,350 --> 00:05:06,830
So we're running our
application.

124
00:05:06,830 --> 00:05:10,070
And as expected, we see a
dispatched Insert before we

125
00:05:10,070 --> 00:05:11,330
get a response.

126
00:05:11,330 --> 00:05:13,940
So this is the log message
saying that we

127
00:05:13,940 --> 00:05:15,730
sent our Insert out.

128
00:05:15,730 --> 00:05:19,290
And this is the log that we have
in our Insert callback

129
00:05:19,290 --> 00:05:22,210
that we actually received
the document.

130
00:05:22,210 --> 00:05:23,730
So let's take a look
at what happens

131
00:05:23,730 --> 00:05:25,650
when we do the failover.

132
00:05:25,650 --> 00:05:28,920
So first, let's connect
to local host 30,001.

133
00:05:28,920 --> 00:05:33,040
And conveniently, we see that
it says it's the PRIMARY in

134
00:05:33,040 --> 00:05:33,800
the prompt.

135
00:05:33,800 --> 00:05:35,810
So we don't really
have to check.

136
00:05:35,810 --> 00:05:37,830
We just know that this
is the PRIMARY.

137
00:05:37,830 --> 00:05:39,260
So let's actually
just completely

138
00:05:39,260 --> 00:05:41,210
shut this server down.

139
00:05:41,210 --> 00:05:44,120
It's called db.shutdownServer.

140
00:05:44,120 --> 00:05:45,710
So we actually have
to be an admin.

141
00:05:45,710 --> 00:05:48,560
I don't have authentication,
so I can just use the admin

142
00:05:48,560 --> 00:05:50,630
database and then shut
down the server.

143
00:05:50,630 --> 00:05:53,585
So now we've shut down our
server, we look over here and

144
00:05:53,585 --> 00:05:55,890
we see some interesting
side effects.

145
00:05:55,890 --> 00:05:58,620
We don't see any errors that
would result from our callback

146
00:05:58,620 --> 00:05:59,360
being called.

147
00:05:59,360 --> 00:06:02,440
We just see this dispatched
Insert message.

148
00:06:02,440 --> 00:06:05,300
So let's go back up there
and take a closer look.

149
00:06:05,300 --> 00:06:08,100
So the interesting thing
to note here is that we

150
00:06:08,100 --> 00:06:10,320
dispatched all of these Inserts
and we're still

151
00:06:10,320 --> 00:06:12,540
dispatching an Insert
per second, but we

152
00:06:12,540 --> 00:06:14,250
don't get any responses.

153
00:06:14,250 --> 00:06:15,610
We also don't get any errors.

154
00:06:15,610 --> 00:06:18,760
There's nothing calling
back to our callbacks.

155
00:06:18,760 --> 00:06:21,740
We're just dispatching these
operations, and they seem to

156
00:06:21,740 --> 00:06:24,040
just be taking longer
than usual.

157
00:06:24,040 --> 00:06:25,410
But then we look down here.

158
00:06:25,410 --> 00:06:28,530
Once the failover completes,
we see this huge batch of

159
00:06:28,530 --> 00:06:30,770
operations suddenly
come through.

160
00:06:30,770 --> 00:06:34,420
So at this point, the failover
was done, the driver sent out

161
00:06:34,420 --> 00:06:37,470
all the operations that had
buffered when we were sending

162
00:06:37,470 --> 00:06:39,220
out one per second.

163
00:06:39,220 --> 00:06:41,140
And we kind of get
these operations

164
00:06:41,140 --> 00:06:43,390
back in one big block.

165
00:06:43,390 --> 00:06:45,730
So that's what happens in the
failover case is that the

166
00:06:45,730 --> 00:06:48,810
driver actually just buffers the
operations you're sending.

167
00:06:48,810 --> 00:06:51,340
So they just seem to take a
little longer than usual.

168
00:06:51,340 --> 00:06:54,180
And then when the election is
done, the driver will send all

169
00:06:54,180 --> 00:06:57,560
the operations and you'll
receive callbacks for the

170
00:06:57,560 --> 00:07:00,870
results as you normally would
just as if the operation took

171
00:07:00,870 --> 00:07:02,050
longer than usual.

172
00:07:02,050 --> 00:07:04,590
So that's pretty much all you
need to know about dealing

173
00:07:04,590 --> 00:07:07,475
with failover in node.js is that
the driver does a lot of

174
00:07:07,475 --> 00:07:08,000
it for you.

175
00:07:08,000 --> 00:07:11,710
So you really don't have to
worry too much about writing

176
00:07:11,710 --> 00:07:14,720
code in your application to
deal with this situation.

177
00:07:14,720 --> 00:07:15,120
All right.

178
00:07:15,120 --> 00:07:20,320
So let's take a quiz on
failover in node.js.

179
00:07:20,320 --> 00:07:23,590
All right, so the question is,
what will happen if this

180
00:07:23,590 --> 00:07:26,010
Insert occurs during
a primary election?

181
00:07:26,010 --> 00:07:29,050
So if you make this call while
an election is happening, what

182
00:07:29,050 --> 00:07:29,840
will happen?

183
00:07:29,840 --> 00:07:32,590
Is it, the Insert will
immediately succeed and the

184
00:07:32,590 --> 00:07:34,015
callback will be called?

185
00:07:34,015 --> 00:07:36,830
Is it, the Insert will
fail with an error?

186
00:07:36,830 --> 00:07:39,030
Is it, the Insert will be
buffered until the election

187
00:07:39,030 --> 00:07:42,450
completes, then the callback
will be after the operation is

188
00:07:42,450 --> 00:07:44,660
sent and a response
is received?

189
00:07:44,660 --> 00:07:47,600
Or is it, the callback will be
called first, then the Insert

190
00:07:47,600 --> 00:07:49,390
will be buffered until the
election completes?

191
00:07:49,390 --> 00:07:50,640