1
00:00:00,000 --> 00:00:00,090

2
00:00:00,090 --> 00:00:02,350
So now, let's talk
about using dot

3
00:00:02,350 --> 00:00:05,530
notation in MongoDB queries.

4
00:00:05,530 --> 00:00:08,680
So right here, we have a
document from Reddit.

5
00:00:08,680 --> 00:00:13,170
And actually, if you look at it
for some documents, we have

6
00:00:13,170 --> 00:00:16,770
a field called "media" with
another sub-field called

7
00:00:16,770 --> 00:00:20,820
"oembed." And down here,
we have a type "video."

8
00:00:20,820 --> 00:00:25,750
So just for documents that are
videos, we actually have this

9
00:00:25,750 --> 00:00:27,130
nested structure.

10
00:00:27,130 --> 00:00:30,140
So the question is, how do we
find these documents, and how

11
00:00:30,140 --> 00:00:33,490
do we make queries based on
fields in the oembed object,

12
00:00:33,490 --> 00:00:34,540
even though it's nested?

13
00:00:34,540 --> 00:00:38,100
Because if we did a query just
on type, we wouldn't have any

14
00:00:38,100 --> 00:00:41,030
way of knowing whether it was
a type of here in the top

15
00:00:41,030 --> 00:00:41,990
level document.

16
00:00:41,990 --> 00:00:45,240
So let's go and see how
we actually do that.

17
00:00:45,240 --> 00:00:47,910
So this is an example of
using dot notation

18
00:00:47,910 --> 00:00:49,830
with the Node.js driver.

19
00:00:49,830 --> 00:00:52,440
So most of this is the same
as our other examples.

20
00:00:52,440 --> 00:00:55,490
The only thing we've really
changed is our query.

21
00:00:55,490 --> 00:01:01,420
So notice here in our query, we
say media.oembed.type and

22
00:01:01,420 --> 00:01:02,930
with a value of video.

23
00:01:02,930 --> 00:01:06,870
So much like the dollar sign
for the special query

24
00:01:06,870 --> 00:01:10,430
operators, the dot is actually
another special

25
00:01:10,430 --> 00:01:12,360
character in MongoDB.

26
00:01:12,360 --> 00:01:17,050
Dot basically says descend
into nested document.

27
00:01:17,050 --> 00:01:19,990
So in this case, media
is a document, and

28
00:01:19,990 --> 00:01:21,300
we have a dot here.

29
00:01:21,300 --> 00:01:24,730
We say descend into the media
document, look for oembed.

30
00:01:24,730 --> 00:01:27,330
And then we have another
dot saying oembed

31
00:01:27,330 --> 00:01:29,000
is actually a document.

32
00:01:29,000 --> 00:01:32,360
Look for type fields in
the oembed document.

33
00:01:32,360 --> 00:01:36,030
And then check if that field
has a value of video.

34
00:01:36,030 --> 00:01:38,490
So down here, we're actually
going to do a projection.

35
00:01:38,490 --> 00:01:42,030
We're going to remove _id, and
we're only going to get

36
00:01:42,030 --> 00:01:44,350
media.oembed.url.

37
00:01:44,350 --> 00:01:47,510
So this is actually going to
remove all the fields in the

38
00:01:47,510 --> 00:01:51,100
top level that aren't oembed and
remove all the fields in

39
00:01:51,100 --> 00:01:53,610
the oembed document
that aren't URL.

40
00:01:53,610 --> 00:01:57,080
So media.oembed.url
is the only actual

41
00:01:57,080 --> 00:01:58,540
value we'll get back.

42
00:01:58,540 --> 00:02:01,560
So down here, we're
doing other query.

43
00:02:01,560 --> 00:02:03,930
We're actually doing the Reddit
front page, because it

44
00:02:03,930 --> 00:02:05,890
had videos on it.

45
00:02:05,890 --> 00:02:07,680
And we're iterating
the documents,

46
00:02:07,680 --> 00:02:09,460
logging them to console.

47
00:02:09,460 --> 00:02:13,120
Let's just run this, verify
that it works.

48
00:02:13,120 --> 00:02:16,540
So we ran our application, and
turned out the front page only

49
00:02:16,540 --> 00:02:18,000
had one video.

50
00:02:18,000 --> 00:02:18,900
But here it is.

51
00:02:18,900 --> 00:02:22,200
We have the media oembed url.

52
00:02:22,200 --> 00:02:23,610
That's our projection.

53
00:02:23,610 --> 00:02:26,110
All the other fields in the
oembed document and all the

54
00:02:26,110 --> 00:02:29,040
other fields in the media
document and all the other

55
00:02:29,040 --> 00:02:30,900
fields in our top level
document have all been

56
00:02:30,900 --> 00:02:31,510
filtered out.

57
00:02:31,510 --> 00:02:33,080
So this is what we get back.

58
00:02:33,080 --> 00:02:36,370
And note if this field actually
didn't exist, we

59
00:02:36,370 --> 00:02:38,500
would just get back
an empty document.

60
00:02:38,500 --> 00:02:41,970
And also note that for fields
that we queried on that didn't

61
00:02:41,970 --> 00:02:45,470
actually have media.oembed.type,
when we

62
00:02:45,470 --> 00:02:48,040
queried on them in their
application, those just

63
00:02:48,040 --> 00:02:49,810
weren't matched by the query.

64
00:02:49,810 --> 00:02:52,740
So this kind of shows that we
may queries even if we don't

65
00:02:52,740 --> 00:02:57,050
know whether the field will
exist in all the documents.

66
00:02:57,050 --> 00:02:59,060
So this is the quiz
about using dot

67
00:02:59,060 --> 00:03:01,290
notation in a query selector.

68
00:03:01,290 --> 00:03:04,740
Your task for this quiz is to
use dot notation to construct

69
00:03:04,740 --> 00:03:07,500
a query that selects for a
document with a name of

70
00:03:07,500 --> 00:03:10,340
"Steve" in the student's
array.

71
00:03:10,340 --> 00:03:12,420
Put your answer in
the box below.

72
00:03:12,420 --> 00:03:14,810
So to make this more specific,
I have an example of the

73
00:03:14,810 --> 00:03:16,810
document that should
match the query.

74
00:03:16,810 --> 00:03:19,600
So your goal is to find a
query that matches this

75
00:03:19,600 --> 00:03:23,800
document because it's looking
for a name of "Steve" inside

76
00:03:23,800 --> 00:03:24,740
the student's array.

77
00:03:24,740 --> 00:03:27,080
And you'll need to use dot
notation to actually build

78
00:03:27,080 --> 00:03:28,330
this query.

79
00:03:28,330 --> 00:03:28,730