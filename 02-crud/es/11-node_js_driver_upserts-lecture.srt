1
00:00:00,000 --> 00:00:00,275

2
00:00:00,275 --> 00:00:00,550
All right.

3
00:00:00,550 --> 00:00:02,700
So now let's talk about upserts

4
00:00:02,700 --> 00:00:05,350
using the Node.js driver.

5
00:00:05,350 --> 00:00:07,960
So first we're going to talk
about just upserts, then we're

6
00:00:07,960 --> 00:00:10,050
going to talk about save,
which is actually a wrap

7
00:00:10,050 --> 00:00:12,780
around upsert, which has
slightly different behavior.

8
00:00:12,780 --> 00:00:14,150
So let's get started.

9
00:00:14,150 --> 00:00:16,450
All right, so here's
our example of

10
00:00:16,450 --> 00:00:18,950
using upserts in MongoDB.

11
00:00:18,950 --> 00:00:20,750
So, a lot of this is the same.

12
00:00:20,750 --> 00:00:23,090
We have our query, and
we have our operator.

13
00:00:23,090 --> 00:00:24,560
We have our options.

14
00:00:24,560 --> 00:00:27,660
Here is the arguments to update,
but the difference is

15
00:00:27,660 --> 00:00:32,140
in our options object, we
actually set upserts to true.

16
00:00:32,140 --> 00:00:35,940
So what this means is that it
will try to find a document

17
00:00:35,940 --> 00:00:39,410
that has student Frank,
assignment homework1, and

18
00:00:39,410 --> 00:00:41,690
update it using this operator.

19
00:00:41,690 --> 00:00:45,210
However, if there is no document
matching this query,

20
00:00:45,210 --> 00:00:47,850
then it'll actually just
insert it, and

21
00:00:47,850 --> 00:00:49,360
then apply this update.

22
00:00:49,360 --> 00:00:51,990
Now, right here operator may not
have been the best choice

23
00:00:51,990 --> 00:00:54,370
of variable names, because
there's not actually an

24
00:00:54,370 --> 00:00:55,330
operator in here.

25
00:00:55,330 --> 00:00:58,570
It's actually replacing the
document, or inserting a new

26
00:00:58,570 --> 00:01:01,830
document, so I could have
called it something like

27
00:01:01,830 --> 00:01:04,060
update doc, or new doc.

28
00:01:04,060 --> 00:01:06,430
But I just called it that
because I copied it from the

29
00:01:06,430 --> 00:01:08,600
other one, which is actually
an operator.

30
00:01:08,600 --> 00:01:10,350
So let's run that.

31
00:01:10,350 --> 00:01:11,230
All right.

32
00:01:11,230 --> 00:01:13,760
Successfully upserted
one document.

33
00:01:13,760 --> 00:01:17,070
So if we go into our
shell, all right.

34
00:01:17,070 --> 00:01:20,590
So here we see our new document,
student Frank, with

35
00:01:20,590 --> 00:01:24,430
a grade of 100, and assignment
homework1.

36
00:01:24,430 --> 00:01:26,700
So we see that it applied
the update.

37
00:01:26,700 --> 00:01:28,600
So let's actually get rid of
this, because I actually have

38
00:01:28,600 --> 00:01:30,340
another example that
I want to show you.

39
00:01:30,340 --> 00:01:34,600
So, let's remove Frank, and
see that he's removed.

40
00:01:34,600 --> 00:01:38,310
So now in here, I'm going to
comment out this line, and use

41
00:01:38,310 --> 00:01:39,460
this other operator.

42
00:01:39,460 --> 00:01:43,000
So, this may seem a little
strange, especially in the

43
00:01:43,000 --> 00:01:46,890
context of an upsert where a
document doesn't yet exist.

44
00:01:46,890 --> 00:01:49,390
So, there are two things that I
want to mention about this.

45
00:01:49,390 --> 00:01:54,130
One is that this actually has
exactly the same behavior as

46
00:01:54,130 --> 00:01:57,530
the line here in the context
of this update.

47
00:01:57,530 --> 00:02:00,210
And the reason for that is that
our query is actually

48
00:02:00,210 --> 00:02:01,870
what gets inserted.

49
00:02:01,870 --> 00:02:05,950
So, this document gets inserted
if there's no match.

50
00:02:05,950 --> 00:02:08,940
And then the update operator
is applied.

51
00:02:08,940 --> 00:02:13,390
So in this case, since we just
deleted our student Frank, we

52
00:02:13,390 --> 00:02:16,520
actually will insert this
document, student Frank,

53
00:02:16,520 --> 00:02:20,020
assignment homework1, and then
apply this operator.

54
00:02:20,020 --> 00:02:22,390
So, the other thing I want to
mention is that we're actually

55
00:02:22,390 --> 00:02:25,700
using dollar sign set with an
object that has two different

56
00:02:25,700 --> 00:02:26,970
fields in it.

57
00:02:26,970 --> 00:02:29,860
This is just to show that
a set can be used for

58
00:02:29,860 --> 00:02:31,130
more than one field.

59
00:02:31,130 --> 00:02:33,410
So in our other example,
we just had one.

60
00:02:33,410 --> 00:02:36,900
So this will actually set date
returned to new date, and set

61
00:02:36,900 --> 00:02:41,410
grade to be 100 in place update,
which in this case

62
00:02:41,410 --> 00:02:43,630
doesn't really matter that much,
because we're already

63
00:02:43,630 --> 00:02:45,000
inserting a document.

64
00:02:45,000 --> 00:02:47,550
But this is just to demonstrate
the order in which

65
00:02:47,550 --> 00:02:48,990
this happens.

66
00:02:48,990 --> 00:02:50,626
So, let's take a look.

67
00:02:50,626 --> 00:02:54,270
All right, so here we see
successfully upserted one

68
00:02:54,270 --> 00:02:56,220
document, just like before.

69
00:02:56,220 --> 00:02:59,720
So let's connect to our shell,
and we see exactly the same

70
00:02:59,720 --> 00:03:02,080
thing, just with the fields
in the different order.

71
00:03:02,080 --> 00:03:05,850
So we have student Frank, we
have grade of 100, assignment

72
00:03:05,850 --> 00:03:09,620
homework1, and here we actually
have date returned.

73
00:03:09,620 --> 00:03:12,290
So, I actually forgot to put
date returned in this

74
00:03:12,290 --> 00:03:16,220
document, but you can see that
it was actually set losing our

75
00:03:16,220 --> 00:03:18,930
dollar sign set operator.

76
00:03:18,930 --> 00:03:21,010
So, now let's talk about save.

77
00:03:21,010 --> 00:03:24,090
So, this is an example
of using save

78
00:03:24,090 --> 00:03:25,840
with the Node.js driver.

79
00:03:25,840 --> 00:03:28,550
So, this one will look more
similar to our replacement

80
00:03:28,550 --> 00:03:32,230
update, because it actually
has a similar interface.

81
00:03:32,230 --> 00:03:34,520
So, just like with our
replacement update, we

82
00:03:34,520 --> 00:03:38,100
actually do a find0ne to find
the original document.

83
00:03:38,100 --> 00:03:42,610
And here we actually do doc date
returned equals new date

84
00:03:42,610 --> 00:03:44,360
to add a date to our document.

85
00:03:44,360 --> 00:03:46,770
So, here's the interesting
part.

86
00:03:46,770 --> 00:03:49,920
For the save function, we're
actually providing the doc.

87
00:03:49,920 --> 00:03:51,360
So the question is,
what is the save

88
00:03:51,360 --> 00:03:52,990
function actually doing?

89
00:03:52,990 --> 00:03:56,910
So, the high level answer is
that it takes our document and

90
00:03:56,910 --> 00:04:01,550
actually replaces it in this
case, but what if the document

91
00:04:01,550 --> 00:04:02,930
doesn't exist?

92
00:04:02,930 --> 00:04:06,360
So, what save is really doing
is it's taking the document,

93
00:04:06,360 --> 00:04:09,000
it's checking to see if there's
an underscore ID field

94
00:04:09,000 --> 00:04:12,650
on the document, and if there
isn't an underscore ID field,

95
00:04:12,650 --> 00:04:16,190
save will actually insert a new
document, but if there is

96
00:04:16,190 --> 00:04:19,970
an underscore ID field, save
will assume that we actually

97
00:04:19,970 --> 00:04:21,730
meant to do an upsert.

98
00:04:21,730 --> 00:04:25,420
So it'll take the document and
do an upsert automatically,

99
00:04:25,420 --> 00:04:29,500
with a query on the document's
underscore ID field.

100
00:04:29,500 --> 00:04:32,120
So, this is slightly more
convenient to use than the

101
00:04:32,120 --> 00:04:35,030
replacement update, but in
effect, it's really doing the

102
00:04:35,030 --> 00:04:36,010
same thing.

103
00:04:36,010 --> 00:04:38,420
So, the result of this should
be, in any case, whether the

104
00:04:38,420 --> 00:04:41,080
document existed or not, or
whether it had an underscore

105
00:04:41,080 --> 00:04:44,750
ID field or not, that when this
call returns, we actually

106
00:04:44,750 --> 00:04:48,510
have doc inserted into
our database.

107
00:04:48,510 --> 00:04:50,294
So, let's take a look.

108
00:04:50,294 --> 00:04:51,980
All right, so here we see

109
00:04:51,980 --> 00:04:54,165
successfully saved one document.

110
00:04:54,165 --> 00:04:58,010
Let's connect to our shell
again, do db.grades.find.

111
00:04:58,010 --> 00:05:01,020
Let's just get all the
assignments with homework2.

112
00:05:01,020 --> 00:05:02,860
All right, so we see all the
documents that have an

113
00:05:02,860 --> 00:05:06,497
assignment of homework2, and
down here, we actually have we

114
00:05:06,497 --> 00:05:09,660
have an assignment with
a date returned.

115
00:05:09,660 --> 00:05:12,430
So, notice that actually the
fields weren't reordered on

116
00:05:12,430 --> 00:05:16,830
this one, which seems to show
that save actually has more in

117
00:05:16,830 --> 00:05:19,480
common with our replacement
update.

118
00:05:19,480 --> 00:05:22,190
Since it's really just querying
on the underscore ID

119
00:05:22,190 --> 00:05:25,100
field, in this case, since we
had one, from getting the

120
00:05:25,100 --> 00:05:29,020
document straight from MongoDB,
and doing an upsert

121
00:05:29,020 --> 00:05:31,222
with the entire document.

122
00:05:31,222 --> 00:05:33,830
All right, so now let's
go to a quiz.

123
00:05:33,830 --> 00:05:37,250
So, the question is, assuming
all the necessary variables

124
00:05:37,250 --> 00:05:39,590
are defined, what
is the result of

125
00:05:39,590 --> 00:05:40,980
calling this function?

126
00:05:40,980 --> 00:05:44,270
Is it to attempt to insert the
object and throw an error if

127
00:05:44,270 --> 00:05:46,190
underscore ID is not unique?

128
00:05:46,190 --> 00:05:49,200
Is it to update and replace
the document?

129
00:05:49,200 --> 00:05:53,100
Is it to upsert to insert or
replace the document, or is it

130
00:05:53,100 --> 00:05:54,350
to do an in place update?

131
00:05:54,350 --> 00:05:55,580