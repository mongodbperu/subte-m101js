1
00:00:00,000 --> 00:00:02,650
All right, so we have our
simple Hello, World

2
00:00:02,650 --> 00:00:04,540
application in express.

3
00:00:04,540 --> 00:00:06,460
But there's one problem
with this.

4
00:00:06,460 --> 00:00:09,190
So the issue is that here, in
our response, we're just

5
00:00:09,190 --> 00:00:11,195
surveying this static
string every time.

6
00:00:11,195 --> 00:00:14,410
What we really want to do send
back an HTML page, but at the

7
00:00:14,410 --> 00:00:16,740
same time, we actually want to
change the contents of that

8
00:00:16,740 --> 00:00:18,210
page programmatically.

9
00:00:18,210 --> 00:00:21,280
So the way we can do this is
using a template library.

10
00:00:21,280 --> 00:00:25,130
So the first thing we want to do
is make a directory for our

11
00:00:25,130 --> 00:00:26,280
HTML pages.

12
00:00:26,280 --> 00:00:29,700
So we're going to call this
directory Views and then let's

13
00:00:29,700 --> 00:00:33,140
open views/hello.html.

14
00:00:33,140 --> 00:00:37,430
And for this, let's just
do h1hello name.

15
00:00:37,430 --> 00:00:40,050
We'll see what this means in a
bit, but basically, these two

16
00:00:40,050 --> 00:00:43,420
curly braces on either side of
"name" is special syntax for

17
00:00:43,420 --> 00:00:46,380
the template engine that we're
going to use in this example.

18
00:00:46,380 --> 00:00:48,860
All right, so now let's go
back to our application.

19
00:00:48,860 --> 00:00:52,180
And let's actually include
our template engine.

20
00:00:52,180 --> 00:00:55,700
So we're actually going to use
a library called Consolidate.

21
00:00:55,700 --> 00:00:59,630
And what Consolidate is
basically a set of wrappers

22
00:00:59,630 --> 00:01:03,900
for a number of template
libraries for "express." So

23
00:01:03,900 --> 00:01:06,400
it's just that "express"
requires template libraries to

24
00:01:06,400 --> 00:01:08,650
have a certain interface,
and "consolidate"

25
00:01:08,650 --> 00:01:10,210
handles that for us.

26
00:01:10,210 --> 00:01:12,770
So what this allows us to do
is go down here and say

27
00:01:12,770 --> 00:01:14,280
app.engine--

28
00:01:14,280 --> 00:01:18,820
set the module HTML
to be cons.swig.

29
00:01:18,820 --> 00:01:21,590
So swig is actually the
template engine

30
00:01:21,590 --> 00:01:22,660
we're going to be using.

31
00:01:22,660 --> 00:01:25,830
And we're using "consolidate"
so that we can integrate it

32
00:01:25,830 --> 00:01:28,050
directly with "express."

33
00:01:28,050 --> 00:01:31,030
So now that we've registered
that module, we can say

34
00:01:31,030 --> 00:01:33,830
app.set and set our
view engine for

35
00:01:33,830 --> 00:01:36,580
"express" to be HTML.

36
00:01:36,580 --> 00:01:39,570
And the last thing we need to
do is tell it where to look

37
00:01:39,570 --> 00:01:41,060
for the views.

38
00:01:41,060 --> 00:01:45,960
So we say app.set views to be
__dirname, current directory

39
00:01:45,960 --> 00:01:48,690
plus the views directory.

40
00:01:48,690 --> 00:01:51,390
All right, so now we've
registered swig, our template

41
00:01:51,390 --> 00:01:53,030
engine with "express".

42
00:01:53,030 --> 00:01:56,480
And then we've told it where
to look for our HTML files.

43
00:01:56,480 --> 00:01:59,040
So now let's actually
generate a template.

44
00:01:59,040 --> 00:02:03,620
So instead of sending the static
string and result.send,

45
00:02:03,620 --> 00:02:06,610
we'll actually do
result.render.

46
00:02:06,610 --> 00:02:08,810
And we look for the
page "hello".

47
00:02:08,810 --> 00:02:12,050
It will automatically add
the HTML extension.

48
00:02:12,050 --> 00:02:15,630
And we actually give it a
dictionary with one key name,

49
00:02:15,630 --> 00:02:18,600
and the value of swig.

50
00:02:18,600 --> 00:02:20,200
So this is going to be
passed directly to

51
00:02:20,200 --> 00:02:21,330
our template engine.

52
00:02:21,330 --> 00:02:22,830
So let's see how
this all works.

53
00:02:22,830 --> 00:02:24,410
So let's run our application.

54
00:02:24,410 --> 00:02:26,320
And we're missing the
module again.

55
00:02:26,320 --> 00:02:31,480
So let's just do npm install
consolidate.

56
00:02:31,480 --> 00:02:33,530
We've got a few warnings, but
it looks like "consolidate"

57
00:02:33,530 --> 00:02:35,160
installed successfully.

58
00:02:35,160 --> 00:02:39,350
Now let's do npm install swig,
since we know we're using that

59
00:02:39,350 --> 00:02:41,490
as our template engine.

60
00:02:41,490 --> 00:02:44,380
All right, so now let's
do node.app--

61
00:02:44,380 --> 00:02:45,940
touch js again.

62
00:02:45,940 --> 00:02:48,400
Now our server's listening
on port 8080.

63
00:02:48,400 --> 00:02:51,080
So let's go back
to our browser.

64
00:02:51,080 --> 00:02:55,355
Local host 8080 and we
get Hello, Swig!.

65
00:02:55,355 --> 00:02:57,310
So if you go back to
our application--

66
00:02:57,310 --> 00:02:59,850
cancel this, your out-dot js.

67
00:02:59,850 --> 00:03:02,450
What's actually happening here
is that we get a request

68
00:03:02,450 --> 00:03:04,440
that's handled by this
Handler here.

69
00:03:04,440 --> 00:03:07,950
And then we call response.render
with "hellow"

70
00:03:07,950 --> 00:03:08,930
and this hash--

71
00:03:08,930 --> 00:03:12,160
so name as the key,
swig as the value.

72
00:03:12,160 --> 00:03:16,330
And what that does it is
actually loads hello.html.

73
00:03:16,330 --> 00:03:19,520
And name here is actually going
to be whatever name we

74
00:03:19,520 --> 00:03:21,320
pass in the hash.

75
00:03:21,320 --> 00:03:25,540
So that's how to use "swig" with
"express" to create HTML

76
00:03:25,540 --> 00:03:27,440
templates on the server side.

77
00:03:27,440 --> 00:03:29,630
This is just meant to be
a very simple example.

78
00:03:29,630 --> 00:03:32,530
And there's actually a lot out
there in terms of client side

79
00:03:32,530 --> 00:03:34,830
rendering, but we're not going
to cover that in this course.

80
00:03:34,830 --> 00:03:36,080