1
00:00:00,000 --> 00:00:00,170

2
00:00:00,170 --> 00:00:03,070
Perfecto, pues vamos a escribir un
sencillo Hola Mundo

3
00:00:03,070 --> 00:00:04,890
usando Node.js.

4
00:00:04,890 --> 00:00:08,450
La primera cosa que queremos hacer
es crear un nuevo directorio.

5
00:00:08,450 --> 00:00:10,960
Vamos a llamarlo hello_world.

6
00:00:10,960 --> 00:00:14,310
Ahora, vamos a empesar a escribir
nuestra primera aplicación Node.js.

7
00:00:14,310 --> 00:00:16,840
Así que solo voy a usar vim
para escribirlo pero tu puedes

8
00:00:16,840 --> 00:00:20,350
usar cualquier otro editor de texto
con el que te sientas confortable.

9
00:00:20,350 --> 00:00:24,000
Vamos a abrir una nuevo fichero,
llamado app.js.

10
00:00:24,000 --> 00:00:26,880
Y nuestra primera aplicación
será realmente simple.

11
00:00:26,880 --> 00:00:31,380
Sólo vamos a escribir por consola
Hello, World.

12
00:00:31,380 --> 00:00:35,340
Por lo que ahora la forma de ejecutarlo es
invocar a node y pasarle el

13
00:00:35,340 --> 00:00:37,520
nombre de nuestra aplicación.

14
00:00:37,520 --> 00:00:39,360
E imprime
Hello, World!

15
00:00:39,360 --> 00:00:40,800
Ok, esto tiene buena pinta.

16
00:00:40,800 --> 00:00:42,650
Ésta es nuestra primera aplicación.

17
00:00:42,650 --> 00:00:46,410
Pero ahora vamos a creaun un
servidor web con ello.

18
00:00:46,410 --> 00:00:49,530
Por lo que para convertirlo en un
servidor web, vamos a borrar

19
00:00:49,530 --> 00:00:57,380
ésta línea y ahora vamos a poner var
http igual a require http.

20
00:00:57,380 --> 00:01:00,310
De este modo HTTP está incorporado
a node.

21
00:01:00,310 --> 00:01:01,250
Y se trata de una librería.

22
00:01:01,250 --> 00:01:03,360
Y lo que estamos diciéndo ahí
arriba es que necesitamos 

23
00:01:03,360 --> 00:01:08,090
usar esa librería, requerir HTTP
y almancenar una referencia a esta

24
00:01:08,090 --> 00:01:11,180
librería y la variable HTTP.

25
00:01:11,180 --> 00:01:12,480
Por lo que podemos bajar

26
00:01:12,480 --> 00:01:16,153
Y decir que var server es igual a
http.createServer.

27
00:01:16,153 --> 00:01:18,900

28
00:01:18,900 --> 00:01:22,360
Y pasarle una función que determine
qué hacer cuando el servidor

29
00:01:22,360 --> 00:01:24,160
reciba una solicitud.

30
00:01:24,160 --> 00:01:26,180
Y también obtendremos un objeto respuesta.

31
00:01:26,180 --> 00:01:29,640
So when our server receives a
request, the request will be

32
00:01:29,640 --> 00:01:33,010
in the first argument, and the
object for handling the

33
00:01:33,010 --> 00:01:35,060
response will be in the
second argument.

34
00:01:35,060 --> 00:01:38,150
So what we can do is when we
get any request, we say

35
00:01:38,150 --> 00:01:44,690
response.writeHead status
200, content.

36
00:01:44,690 --> 00:01:47,080
OK, so first we set
this to set some

37
00:01:47,080 --> 00:01:49,120
metadata about a response.

38
00:01:49,120 --> 00:01:52,620
Then after we've done that, we
actually send the response by

39
00:01:52,620 --> 00:01:57,170
calling response.end and
send Hello, World!

40
00:01:57,170 --> 00:02:00,100
What this does is it specifies
what to do when our server

41
00:02:00,100 --> 00:02:01,520
receives a request.

42
00:02:01,520 --> 00:02:04,850
But the one part missing here
is telling our server to

43
00:02:04,850 --> 00:02:07,140
listen for incoming
connections.

44
00:02:07,140 --> 00:02:10,949
So now let's listen
on port 8000 and

45
00:02:10,949 --> 00:02:12,650
let's log to the console.

46
00:02:12,650 --> 00:02:14,820
A friendly message telling the
user that the server has

47
00:02:14,820 --> 00:02:16,500
successfully started.

48
00:02:16,500 --> 00:02:20,470
So now that we'll actually run
this by calling node.app.js.

49
00:02:20,470 --> 00:02:24,280
You can see our servers running
on local host 8000.

50
00:02:24,280 --> 00:02:26,730
So what we can do now is we can
go to our browser and we

51
00:02:26,730 --> 00:02:29,830
can type localhost8000.

52
00:02:29,830 --> 00:02:31,890
And we get Hello, World!

53
00:02:31,890 --> 00:02:35,680
So that is the first example
of using node.js to write a

54
00:02:35,680 --> 00:02:36,990
simple server.

55
00:02:36,990 --> 00:02:40,810
Notice, we used the HTTP
library, but actually node.js

56
00:02:40,810 --> 00:02:44,690
allows you to interact with
the client on a number of

57
00:02:44,690 --> 00:02:46,100
different levels.

58
00:02:46,100 --> 00:02:49,370
And if you wanted to, you could
actually just open a raw

59
00:02:49,370 --> 00:02:52,660
TCP connection and interact
that way.

60
00:02:52,660 --> 00:02:54,360
For this course we'll
actually be using a

61
00:02:54,360 --> 00:02:56,300
framework called Express.

62
00:02:56,300 --> 00:03:00,190
So that's one level above HTTP
and actually handles a lot of

63
00:03:00,190 --> 00:03:04,690
the routing and details
of HTTP for us.

64
00:03:04,690 --> 00:03:07,290
Right, so those are the basics
of setting up a simple server

65
00:03:07,290 --> 00:03:08,540
running on node.js.

66
00:03:08,540 --> 00:03:09,100
