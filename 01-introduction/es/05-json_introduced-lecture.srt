1
00:00:00,000 --> 00:00:00,640

2
00:00:00,640 --> 00:00:03,470
So let's talk about JSON.

3
00:00:03,470 --> 00:00:06,640
So this is going to be an
introduction to JSON and the

4
00:00:06,640 --> 00:00:08,280
JSON structure.

5
00:00:08,280 --> 00:00:09,930
So we'll first talk
about the basic

6
00:00:09,930 --> 00:00:11,570
structure of a JSON object.

7
00:00:11,570 --> 00:00:13,790
Then we'll talk about
value types.

8
00:00:13,790 --> 00:00:16,200
Then we'll talk about
some basic nesting.

9
00:00:16,200 --> 00:00:18,070
Then we'll talk about
some deep nesting.

10
00:00:18,070 --> 00:00:21,400
So we'll go over each of those
individually and then come

11
00:00:21,400 --> 00:00:23,260
back after each step.

12
00:00:23,260 --> 00:00:23,610
All right.

13
00:00:23,610 --> 00:00:29,240
So let's go into our Mongo shell
and let's use jsonintro.

14
00:00:29,240 --> 00:00:33,340
All right, so first let's
do db.basic.find.

15
00:00:33,340 --> 00:00:36,540
So this is a basic JSON object
that I inserted earlier.

16
00:00:36,540 --> 00:00:40,800
Basically it has an _id field
and a name field.

17
00:00:40,800 --> 00:00:43,610
So from this, you can get a
pretty good sense of what the

18
00:00:43,610 --> 00:00:45,500
JSON format looks like.

19
00:00:45,500 --> 00:00:48,240
It's meant to be a human
readable data format.

20
00:00:48,240 --> 00:00:50,520
But if you type something
in JSON, any JSON

21
00:00:50,520 --> 00:00:51,630
parser can accept it.

22
00:00:51,630 --> 00:00:54,380
It's also generated by a lot
of different projects.

23
00:00:54,380 --> 00:00:58,370
So the idea is that this whole
thing is a JSON object.

24
00:00:58,370 --> 00:01:01,150
And the way you start a JSON
object is you actually have

25
00:01:01,150 --> 00:01:04,530
the open curly brace, and inside
the curly brace you

26
00:01:04,530 --> 00:01:07,500
actually have a bunch
of key value pairs.

27
00:01:07,500 --> 00:01:11,770
So you have a key, then a colon,
and then the value.

28
00:01:11,770 --> 00:01:14,170
And then if you want to have
another key value pair, you

29
00:01:14,170 --> 00:01:18,970
put a comma here, and then a
key, colon, and another value.

30
00:01:18,970 --> 00:01:21,420
And then if your object
is done, you use a

31
00:01:21,420 --> 00:01:23,530
closed curly brace.

32
00:01:23,530 --> 00:01:26,760
So that's the basic structure
of a JSON object.

33
00:01:26,760 --> 00:01:28,210
This is a document
that I inserted

34
00:01:28,210 --> 00:01:30,140
with "name", "MongoDB".

35
00:01:30,140 --> 00:01:33,080
And MongoDB actually
automatically generated this

36
00:01:33,080 --> 00:01:36,280
_id field which is meant
to be unique

37
00:01:36,280 --> 00:01:38,130
across the whole system.

38
00:01:38,130 --> 00:01:38,440
All right.

39
00:01:38,440 --> 00:01:41,550
So this is the basic structure
of a JSON object.

40
00:01:41,550 --> 00:01:41,870
All right.

41
00:01:41,870 --> 00:01:45,020
So now we talk about a
basic JSON structure.

42
00:01:45,020 --> 00:01:47,640
So next, let's actually
talk about the

43
00:01:47,640 --> 00:01:49,950
values in our JSON structure.

44
00:01:49,950 --> 00:01:52,080
You know, we've mentioned the
key value pairs, lets talk

45
00:01:52,080 --> 00:01:54,646
about what the values
can actually be.

46
00:01:54,646 --> 00:01:55,060
All right.

47
00:01:55,060 --> 00:01:57,630
We're back in our Mongo shell
in the JSON intro database,

48
00:01:57,630 --> 00:02:01,080
and let's just do
db.values.find.

49
00:02:01,080 --> 00:02:04,220
And let's actually do
db.values.find().pretty() to

50
00:02:04,220 --> 00:02:06,720
make this a little bit
easier to see.

51
00:02:06,720 --> 00:02:07,070
All right.

52
00:02:07,070 --> 00:02:10,380
So these are two values that
we have in our JSON intro

53
00:02:10,380 --> 00:02:12,750
database and our values
collection.

54
00:02:12,750 --> 00:02:14,780
So you see we have two
documents here.

55
00:02:14,780 --> 00:02:16,590
And we actually have
a lot of different

56
00:02:16,590 --> 00:02:18,910
types for our values.

57
00:02:18,910 --> 00:02:22,280
So if you remember before, we
have these key value pairs, we

58
00:02:22,280 --> 00:02:25,870
have the field name, and then
the actual value, then a

59
00:02:25,870 --> 00:02:30,180
comma, field name colon value
comma, field name colon value

60
00:02:30,180 --> 00:02:32,390
then close braced
and our object.

61
00:02:32,390 --> 00:02:36,440
So this is one JSON object,
two JSON objects.

62
00:02:36,440 --> 00:02:39,015
So our collection actually has
two documents in it right now.

63
00:02:39,015 --> 00:02:42,600
And you can tell because these
curly braces actually delimit

64
00:02:42,600 --> 00:02:45,790
the beginning and end
of each JSON object.

65
00:02:45,790 --> 00:02:48,950
So what I really wanted to point
out here is that the

66
00:02:48,950 --> 00:02:52,570
values actually can have
different types.

67
00:02:52,570 --> 00:02:55,360
So notice here we have
"name":"MongoDB.

68
00:02:55,360 --> 00:02:59,310
MongoDB is in quotes, which
means it's a string type in

69
00:02:59,310 --> 00:03:00,770
our JSON object.

70
00:03:00,770 --> 00:03:03,550
Down here, we have
"database":"true, so we

71
00:03:03,550 --> 00:03:05,870
actually have a Boolean
type right here.

72
00:03:05,870 --> 00:03:09,610
Down here, we have "food":"pie
in quotes, means that's a

73
00:03:09,610 --> 00:03:11,050
string type.

74
00:03:11,050 --> 00:03:12,300
Down here we have
"price":"10.99".

75
00:03:12,300 --> 00:03:14,470

76
00:03:14,470 --> 00:03:17,470
You can see here that this is
actually a numeric type.

77
00:03:17,470 --> 00:03:19,980
So the idea here is that we
actually can have different

78
00:03:19,980 --> 00:03:21,500
types in our values.

79
00:03:21,500 --> 00:03:23,400
Not only can we have different
types, we can actually have

80
00:03:23,400 --> 00:03:25,110
completely different fields.

81
00:03:25,110 --> 00:03:27,080
And we could have the
same field with

82
00:03:27,080 --> 00:03:28,710
two different types.

83
00:03:28,710 --> 00:03:32,090
So down here we could have
"database":"yes", if we

84
00:03:32,090 --> 00:03:35,510
wanted, or "database":"no".

85
00:03:35,510 --> 00:03:35,750
All right.

86
00:03:35,750 --> 00:03:38,150
So the idea here is that you can
actually represent values

87
00:03:38,150 --> 00:03:42,010
with completely different types
in a single JSON object.

88
00:03:42,010 --> 00:03:44,640
So we talked about value types
in JSON and some of the

89
00:03:44,640 --> 00:03:46,900
different ways you can represent
that, but actually

90
00:03:46,900 --> 00:03:50,450
directly related to that
is the idea of nesting.

91
00:03:50,450 --> 00:03:52,390
So not only can we have
different types for our

92
00:03:52,390 --> 00:03:55,160
values, we can actually go
beyond just the primitive

93
00:03:55,160 --> 00:03:58,960
types and actually have more
complicated structures.

94
00:03:58,960 --> 00:04:01,145
So let's look at an
example of that.

95
00:04:01,145 --> 00:04:01,590
All right.

96
00:04:01,590 --> 00:04:03,570
So now we're back in
our Mongo shell.

97
00:04:03,570 --> 00:04:05,780
We're going to look at some
examples of nested JSON

98
00:04:05,780 --> 00:04:08,320
structures, so let's just
do the query here,

99
00:04:08,320 --> 00:04:11,140
db.nested.find, then do
".pretty" to make

100
00:04:11,140 --> 00:04:12,500
it easier to read.

101
00:04:12,500 --> 00:04:16,690
So here we have two examples
of nested JSON structures.

102
00:04:16,690 --> 00:04:19,753
So notice, like before, we have
our key value pairs, "id"

103
00:04:19,753 --> 00:04:23,780
: "Objectid", "product"
: "car".

104
00:04:23,780 --> 00:04:26,500
We have our string type,
car is in quotes.

105
00:04:26,500 --> 00:04:29,040
But colors, actually,
is an array here.

106
00:04:29,040 --> 00:04:32,300
So if you open with a square
bracket in JSON, that

107
00:04:32,300 --> 00:04:35,170
indicates that you're starting
an array, and that actually

108
00:04:35,170 --> 00:04:37,030
has a slightly different
syntax.

109
00:04:37,030 --> 00:04:41,090
So in our array, we can have
just value comma value.

110
00:04:41,090 --> 00:04:42,760
So we don't have keys
in our array.

111
00:04:42,760 --> 00:04:45,940
It's kind of implicit, so you
can think of the key for red

112
00:04:45,940 --> 00:04:50,870
as being zero, the key for this
value, black, as one.

113
00:04:50,870 --> 00:04:54,250
So down here we have another
example of a nested structure.

114
00:04:54,250 --> 00:04:55,740
We have our product key.

115
00:04:55,740 --> 00:04:59,370
And we have the value of laptop,
that's a string.

116
00:04:59,370 --> 00:05:00,810
Then we have our attributes,
which is

117
00:05:00,810 --> 00:05:02,440
actually a nested object.

118
00:05:02,440 --> 00:05:05,600
So since we're opening with a
curly brace, we actually are

119
00:05:05,600 --> 00:05:08,960
indicating that the value of
attributes is an object

120
00:05:08,960 --> 00:05:12,630
itself, which itself has
key value pairs.

121
00:05:12,630 --> 00:05:15,030
So down here we have "type"
: "mac", "shiny" : "true",

122
00:05:15,030 --> 00:05:16,315
"expensive" : "true".

123
00:05:16,315 --> 00:05:19,510
And that's all in the attributes
sub-document or

124
00:05:19,510 --> 00:05:21,075
sub-object.

125
00:05:21,075 --> 00:05:21,520
All right.

126
00:05:21,520 --> 00:05:26,235
So that's an example of using
nested structures in JSON.

127
00:05:26,235 --> 00:05:26,670
All right.

128
00:05:26,670 --> 00:05:29,890
So we talked a little bit about
basic nesting and JSON,

129
00:05:29,890 --> 00:05:32,330
so now let's talk about some
more complicated structures

130
00:05:32,330 --> 00:05:36,200
and really get into what we can
do with these nested JSON

131
00:05:36,200 --> 00:05:37,130
structures.

132
00:05:37,130 --> 00:05:39,790
So back in our shell, I'm going
to do a query on the

133
00:05:39,790 --> 00:05:42,690
deep nested collection and
pretty print it so it makes it

134
00:05:42,690 --> 00:05:43,760
easier to read.

135
00:05:43,760 --> 00:05:46,370
So this document is a little
bit more complicated, so I

136
00:05:46,370 --> 00:05:47,700
just have one in here.

137
00:05:47,700 --> 00:05:51,000
This is an example of a more
complex nested structure and

138
00:05:51,000 --> 00:05:54,430
kind of should give you an idea
of the variety of things

139
00:05:54,430 --> 00:05:58,110
that we can represent using
these nested structures.

140
00:05:58,110 --> 00:06:01,560
So just like before, we have
our key value pairs,

141
00:06:01,560 --> 00:06:04,240
"class":"algegra" and
"students" colon.

142
00:06:04,240 --> 00:06:07,070
And again, just like before,
we had an array.

143
00:06:07,070 --> 00:06:09,910
But notice, inside our array
we don't have just string

144
00:06:09,910 --> 00:06:14,090
values or Booleans, we actually
have an object.

145
00:06:14,090 --> 00:06:17,040
So this shows that the values
of our array are just like

146
00:06:17,040 --> 00:06:20,670
values in an object, they can
actually have any type,

147
00:06:20,670 --> 00:06:22,840
including objects or arrays.

148
00:06:22,840 --> 00:06:24,980
So this could be an array of
arrays, this could be an array

149
00:06:24,980 --> 00:06:28,220
of objects, this could be an
array of objects, strings, and

150
00:06:28,220 --> 00:06:30,460
Booleans all mixed together.

151
00:06:30,460 --> 00:06:33,830
This is just showing our
nested structure.

152
00:06:33,830 --> 00:06:35,280
So here we have our array.

153
00:06:35,280 --> 00:06:37,290
In it is this object.

154
00:06:37,290 --> 00:06:40,880
And we have keys and values in
this object "name" : "Susan",

155
00:06:40,880 --> 00:06:43,970
"activities" colon, and
then this array.

156
00:06:43,970 --> 00:06:46,330
And in this array we
also have objects.

157
00:06:46,330 --> 00:06:50,130
We have objects for the
activities and they give more

158
00:06:50,130 --> 00:06:51,600
description of what
the activities

159
00:06:51,600 --> 00:06:54,080
are than simple strings.

160
00:06:54,080 --> 00:06:56,380
So we could actually have
activities just be an array of

161
00:06:56,380 --> 00:07:00,710
strings, but this is just to
show that we can represent

162
00:07:00,710 --> 00:07:01,660
even more than that.

163
00:07:01,660 --> 00:07:04,580
So we have an array, and inside
that we have an object.

164
00:07:04,580 --> 00:07:08,670
Inside that we have an object
where one of the values is an

165
00:07:08,670 --> 00:07:11,650
array which itself
contains objects.

166
00:07:11,650 --> 00:07:14,700
So this is an example of
representing a deeply nested

167
00:07:14,700 --> 00:07:16,870
structure in JSON.

168
00:07:16,870 --> 00:07:19,680
So I'm going to talk a little
bit about how to use these

169
00:07:19,680 --> 00:07:22,720
JSON objects in the shell, in
case you want to experiment

170
00:07:22,720 --> 00:07:24,330
with this on your own.

171
00:07:24,330 --> 00:07:26,790
So just to get started, let's
get this document out of our

172
00:07:26,790 --> 00:07:28,760
deep nested collection
and assign it

173
00:07:28,760 --> 00:07:31,270
to the course variable.

174
00:07:31,270 --> 00:07:33,050
Let's print this out, see
what it looks like.

175
00:07:33,050 --> 00:07:33,860
All right.

176
00:07:33,860 --> 00:07:37,080
So we see our same nested
structure that we just found

177
00:07:37,080 --> 00:07:39,760
in our deep nested collection.

178
00:07:39,760 --> 00:07:43,370
So what we can do here is we can
actually access this just

179
00:07:43,370 --> 00:07:45,260
like a normal JavaScript
object.

180
00:07:45,260 --> 00:07:50,270
So we can actually do
course.students, and we see

181
00:07:50,270 --> 00:07:52,240
our array of students.

182
00:07:52,240 --> 00:07:55,860
Can also use bracket notation,
we get the same result.

183
00:07:55,860 --> 00:07:58,370
So we can access this just
like we would a normal

184
00:07:58,370 --> 00:08:02,990
JavaScript object and actually
what we can do is go deep into

185
00:08:02,990 --> 00:08:05,010
the structure of
this document.

186
00:08:05,010 --> 00:08:09,180
So we can actually do course
students and get the first

187
00:08:09,180 --> 00:08:14,710
student in the "students" array,
and then do ".name".

188
00:08:14,710 --> 00:08:17,730
So we've actually gone deep
in this document, and I'll

189
00:08:17,730 --> 00:08:19,480
actually print that out again.

190
00:08:19,480 --> 00:08:22,140
So we've actually gone deep into
this document and said,

191
00:08:22,140 --> 00:08:24,610
we're getting this course
document looking at the

192
00:08:24,610 --> 00:08:27,560
students array, looking at the
first element of the array

193
00:08:27,560 --> 00:08:31,810
with this zero index, and then
just doing ".name" to get the

194
00:08:31,810 --> 00:08:34,640
name out of the document
in the first

195
00:08:34,640 --> 00:08:36,740
element of the array.

196
00:08:36,740 --> 00:08:40,150
So not only can we read these
elements and see them as JSON,

197
00:08:40,150 --> 00:08:42,669
we can actually modify them.

198
00:08:42,669 --> 00:08:46,330
So let's say Susan wanted to be
called Sue, we could just

199
00:08:46,330 --> 00:08:49,370
change the name and now if we
print out of our "students"

200
00:08:49,370 --> 00:08:53,680
object, we can see down here
Susan has been replaced by Sue

201
00:08:53,680 --> 00:08:57,150
in the name field of this
first student document.

202
00:08:57,150 --> 00:09:00,930
So as a final note, if you want
to get more information

203
00:09:00,930 --> 00:09:04,350
about JSON, what JSON really
is, and what qualifies as

204
00:09:04,350 --> 00:09:07,240
valid JSON, you can actually
go to JSON.org and actually

205
00:09:07,240 --> 00:09:11,526
see the complete JSON
specification.

206
00:09:11,526 --> 00:09:12,320
All right.

207
00:09:12,320 --> 00:09:14,380
So now it's time for our quiz.

208
00:09:14,380 --> 00:09:17,740
Which of the following are
valid JSON documents?

209
00:09:17,740 --> 00:09:21,550
So check all of these that
are valid JSON documents.

210
00:09:21,550 --> 00:09:22,800