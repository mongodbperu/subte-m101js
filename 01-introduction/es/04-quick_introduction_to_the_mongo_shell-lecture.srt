1
00:00:00,000 --> 00:00:00,160

2
00:00:00,160 --> 00:00:00,530
All right.

3
00:00:00,530 --> 00:00:02,070
So this is going to be
a quick introduction

4
00:00:02,070 --> 00:00:03,330
to the Mongo Shell.

5
00:00:03,330 --> 00:00:07,550
This is actually a terminal
window open in Mac OS X. Just

6
00:00:07,550 --> 00:00:09,890
a Shell prompt right here.

7
00:00:09,890 --> 00:00:12,370
So if you have MongoDB installed
globally on your

8
00:00:12,370 --> 00:00:16,270
system and you have a running
MongoDB instance, you should

9
00:00:16,270 --> 00:00:20,040
just be able to type mongo,
and the Mongo Shell will

10
00:00:20,040 --> 00:00:24,380
automatically connect to the
running MongoDB instance.

11
00:00:24,380 --> 00:00:29,940
So now we can do things like
show dbs, and show the

12
00:00:29,940 --> 00:00:32,290
databases on this instance.

13
00:00:32,290 --> 00:00:35,620
So this just gives us a list of
the databases that we have

14
00:00:35,620 --> 00:00:36,550
currently stored.

15
00:00:36,550 --> 00:00:40,930
So you can do something
like use demo.

16
00:00:40,930 --> 00:00:44,120
So note that our demo database
didn't actually appear in the

17
00:00:44,120 --> 00:00:47,670
list above when we did show dbs,
and the reason for that

18
00:00:47,670 --> 00:00:51,280
is our demo database doesn't
actually exist yet.

19
00:00:51,280 --> 00:00:53,100
It'll actually be created
automatically when

20
00:00:53,100 --> 00:00:53,970
we try to use it.

21
00:00:53,970 --> 00:00:56,510
So, now we're in this demo
database, and we can do

22
00:00:56,510 --> 00:00:57,815
something like db.things.find.

23
00:00:57,815 --> 00:01:01,590

24
00:01:01,590 --> 00:01:04,400
So what this actually does is
it says, all right, we're in

25
00:01:04,400 --> 00:01:05,530
the demo db.

26
00:01:05,530 --> 00:01:07,870
This is a special object in the
shell that we register,

27
00:01:07,870 --> 00:01:11,280
and that's sort of the connector
through which we

28
00:01:11,280 --> 00:01:13,480
interact with the database.

29
00:01:13,480 --> 00:01:16,790
So when you do db.things.find,
what that's doing is it's

30
00:01:16,790 --> 00:01:20,800
saying, using my current
database and the collection

31
00:01:20,800 --> 00:01:23,610
things, we want to find all
the documents in that

32
00:01:23,610 --> 00:01:24,770
collection.

33
00:01:24,770 --> 00:01:26,630
So, notice we don't have
anything in that collection

34
00:01:26,630 --> 00:01:30,120
right now, so we can insert
a very simple JSON object.

35
00:01:30,120 --> 00:01:32,100
So what we can do is we can
do db.things.insert.

36
00:01:32,100 --> 00:01:34,992

37
00:01:34,992 --> 00:01:40,660
We can insert an object with a
key of a, a value of 1, and a

38
00:01:40,660 --> 00:01:46,055
key of b, a value of 2, and
a key of c, value of 3.

39
00:01:46,055 --> 00:01:49,130
All right, so now if we
go back up here, we do

40
00:01:49,130 --> 00:01:51,860
db.things.find again, we can
see actually see that we

41
00:01:51,860 --> 00:01:52,840
inserted the document.

42
00:01:52,840 --> 00:01:57,140
So, notice that there's an extra
underscore ID field with

43
00:01:57,140 --> 00:02:00,620
object ID, and this is a special
field automatically

44
00:02:00,620 --> 00:02:04,330
generated by MongoDB, and used
internally by MongoDB, and

45
00:02:04,330 --> 00:02:06,650
we'll talk about this
a little bit later.

46
00:02:06,650 --> 00:02:09,169
So now let's try to insert
another JSON document.

47
00:02:09,169 --> 00:02:18,570
So, let's do db.things.insert,
and let's try d of 4, e of 5,

48
00:02:18,570 --> 00:02:20,650
and just insert to that.

49
00:02:20,650 --> 00:02:22,280
So it looks like we have
a syntax error.

50
00:02:22,280 --> 00:02:24,950
And if you look up here, you
can see that instead of a

51
00:02:24,950 --> 00:02:27,840
colon to say, no, this is the
key for this value, we

52
00:02:27,840 --> 00:02:29,320
actually have a comma here.

53
00:02:29,320 --> 00:02:33,820
So, this is the token for going
to the next key in JSON

54
00:02:33,820 --> 00:02:36,040
document, and we're using it
in the wrong place here.

55
00:02:36,040 --> 00:02:38,690
So, let's redo that.

56
00:02:38,690 --> 00:02:41,580
So, we were able to answer
that successfully.

57
00:02:41,580 --> 00:02:44,640
Now if we do a db.things.find,
you see once again that we

58
00:02:44,640 --> 00:02:47,850
have the underscore ID field,
and we have the

59
00:02:47,850 --> 00:02:50,290
d of 4, e of 5.

60
00:02:50,290 --> 00:02:52,940
So if we wanted to just find one
of these documents, we can

61
00:02:52,940 --> 00:02:56,730
actually pass a JSON document
as a query specifier.

62
00:02:56,730 --> 00:02:59,400
So instead of doing
db.things.find and finding

63
00:02:59,400 --> 00:03:03,110
everything, we can do
db.things.find only documents

64
00:03:03,110 --> 00:03:06,820
that have a field a and a value
of 1 for that field.

65
00:03:06,820 --> 00:03:08,980
And we just find the
one document.

66
00:03:08,980 --> 00:03:11,730
So, one more thing that I
haven't talked about as much

67
00:03:11,730 --> 00:03:15,510
in this lecture is that we are
actually in a complete

68
00:03:15,510 --> 00:03:17,150
JavaScript environment.

69
00:03:17,150 --> 00:03:19,550
So, I've just done a few simple
commands, like an

70
00:03:19,550 --> 00:03:22,800
insert and a find, but we can do
pretty much anything that's

71
00:03:22,800 --> 00:03:24,990
supported by the v8
JavaScript engine.

72
00:03:24,990 --> 00:03:31,680
So if we wanted to, we could
say, for var i equals 0, i

73
00:03:31,680 --> 00:03:36,480
less than 10, i plus plus, and
we can actually say, for each

74
00:03:36,480 --> 00:03:38,100
iteration of this loop,
db.things.insert.

75
00:03:38,100 --> 00:03:40,670

76
00:03:40,670 --> 00:03:43,720
the field x with the key of i.

77
00:03:43,720 --> 00:03:46,230
So those will actually just go
through this loop, insert all

78
00:03:46,230 --> 00:03:48,440
10 documents, then give a
[INAUDIBLE] the prompt.

79
00:03:48,440 --> 00:03:51,520
So now we can do
db.things.find.

80
00:03:51,520 --> 00:03:54,260
You notice we have 10 new
documents inserted, so that's

81
00:03:54,260 --> 00:03:56,650
just one example of how you
could actually use the fact

82
00:03:56,650 --> 00:03:59,600
that this is a complete
JavaScript environment with

83
00:03:59,600 --> 00:04:01,633
the MongoDB operations.

84
00:04:01,633 --> 00:04:04,280
All right, so here's
our next quiz.

85
00:04:04,280 --> 00:04:05,860
Which of the following
expressions

86
00:04:05,860 --> 00:04:07,730
are valid JSON documents?

87
00:04:07,730 --> 00:04:08,980
So select all that apply.

88
00:04:08,980 --> 00:04:10,210